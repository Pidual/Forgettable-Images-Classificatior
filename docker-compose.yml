services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: always
    command:
      - "--api.insecure=true"  # UI de Traefik en modo inseguro para pruebas
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--ping=true"           # Para health check
      - "--providers.docker.defaultrule=Host(`{{ .Name }}.localhost`)"
      - "--log.level=DEBUG"     # Habilita logs detallados
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - traefik_network
    labels:
      # Definici칩n de router catch-all para capturar solicitudes no coincidentes (por ejemplo, 404)
      - "traefik.http.routers.error404.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.error404.priority=1"
      - "traefik.http.routers.error404.service=nginx-error"

  nginx-error:
    image: nginx:alpine
    container_name: nginx_error
    volumes:
      - ./nginx:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-error.rule=Host(`error.localhost`)"
      - "traefik.http.routers.nginx-error.entrypoints=web"
      - "traefik.http.services.nginx-error.loadbalancer.server.port=80"

  users:
    build: ./users_service
    container_name: users_service
    environment:
      - SECRET_KEY=supersecretkey
      - SQLALCHEMY_DATABASE_URI=postgresql://user:password@postgres_db/microservices_db
    depends_on:
      - db
    networks:
      - traefik_network
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=Host(`users.localhost`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.services.users.loadbalancer.server.port=5001"
      - "traefik.docker.network=traefik-30avanzado_traefik_network"
      # No se asocia middleware de error, ya que el catch-all se encargar치 de las solicitudes no coincidentes

  images:
    build: ./images_service
    container_name: images_service
    environment:
      - SECRET_KEY=supersecretkey
      - SQLALCHEMY_DATABASE_URI=postgresql://user:password@postgres_db/microservices_db
    volumes:
      - images_data:/app/uploads
    networks:
      - traefik_network
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.images.rule=Host(`images.localhost`)"
      - "traefik.http.routers.images.entrypoints=web"
      - "traefik.http.services.images.loadbalancer.server.port=5002"
      - "traefik.docker.network=traefik-30avanzado_traefik_network"
      # No se asocia middleware de error directamente; el catch-all se encargar치 de los 404

  inference:
    build: ./inference_service
    container_name: inference_service
    environment:
      - SECRET_KEY=supersecretkey
    networks:
      - traefik_network
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inference.rule=Host(`inference.localhost`)"
      - "traefik.http.routers.inference.entrypoints=web"
      - "traefik.http.services.inference.loadbalancer.server.port=5003"
      # Sin middleware de error directo; se usar치 el catch-all para solicitudes no coincidentes

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: microservices_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

networks:
  traefik_network:
    driver: bridge
  app_network:
    driver: bridge

volumes:
  images_data:
  postgres_data: